
function help::usage () {
  local -r max_len=72
  local out
  printf -v out "Usage: %s [-h]" "${0}"
  while [ $# -ne 0 ]; do
    if [ "${#out}" -ge "${max_len}" ]; then
      printf "%s\n  " "${out}"
      out=""
    fi
    if [[ "${1}" =~ ^- ]] || [[ "${1}" =~ \.\.\.$ ]]; then
      printf -v out "%s [%s]" "${out}" "${1}"
    else
      printf -v out "%s %s" "${out}" "${1}"
    fi
    shift
  done
  echo "${out}"
}

function help::description () {
  echo ""
  while [ $# -ne 0 ]; do
    printf "%s\n" "${1}"
    shift
  done
}

function help::positional_argument () {
  printf "\n%s" "positional arguments:"
  while [ $# -ne 0 ]; do
    if [[ "${1}" =~ ^[A-Z_]+$ ]]; then
      printf "\n  %s" "${1}"
    else
      printf "\b\t        %s" "${1}"
    fi
    shift
  done
  echo ""
}

function help::optional () {
  printf "\n%s\n" "optional arguments:"
}

function help::optional_argument () {
  local -r -i max_len=48
  local -i i match_len out_len
  local -a options
  local -A kwargs
  local out match
  while [ $# -ne 0 ]; do
    if [[ "${1}" =~ ^- ]]; then
      options+=("${1}")
    elif [[ "${1}" =~ ^(var|desc|default)=(.*)$ ]]; then
      kwargs["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
    fi
    shift
  done
  printf "  %s" "${options[0]}"
  i=1
  while [ "${i}" -lt "${#options[@]}" ]; do
    printf ", %s" "${options[${i}]}"
    (( i++ ))
  done
  printf " %s\n" "${kwargs[var]}"
  if [ -n "${kwargs[default]}" ]; then
    printf -v match "%s (default: %s)" "${kwargs[desc]}" "${kwargs[default]}"
  else
    match="${kwargs[desc]}"
  fi
  [[ "${match}" =~ ([^[:space:]]+)(.*)$ ]]
  out="${BASH_REMATCH[1]}"
  match="${BASH_REMATCH[2]}"
  while [[ "${match}" =~ ([^[:space:]]+)(.*)$ ]]; do
    match_len="${#BASH_REMATCH[1]}"
    if (( match_len + out_len > max_len )); then
      printf "\t\t%s\n" "${out}"
      out="${BASH_REMATCH[1]}"
    else
      printf -v out "%s %s" "${out}" "${BASH_REMATCH[1]}"
    fi
    out_len="${#out}"
    match="${BASH_REMATCH[2]}"
  done
  printf "\t\t%s\n" "${out}"
}

function help::optional_help () {
  help::optional_argument "-h" "--help" desc="Show this help message and exit."
}
