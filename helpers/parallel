# DO NOT MODIFY THIS FILE
# Require bash 4.4 or above
# Functions to do things in parallel

#######################################
# Init required variables `PARALLEL_COUNT` & `PARALLEL_MAX`
# You can init variables by yourself if you want
# Globals:
#   PARALLEL_COUNT
#   PARALLEL_MAX
#######################################
function parallel::init () {
  declare -g -i PARALLEL_COUNT=0
  # See https://stackoverflow.com/questions/6481005/how-to-obtain-the-number-of-cpus-cores-in-linux-from-the-command-line#answer-23569003
  declare -g -i PARALLEL_MAX=$(getconf _NPROCESSORS_ONLN)
}

#######################################
# Wait running tasks with their pid.
# If pid is omit, then wait for first finished task
# Globals:
#   PARALLEL_COUNT
# Arguments:
#   ...pids (optional)
#######################################
function parallel::wait () {
  if [ $PARALLEL_COUNT -eq 0 ]; then
    return 0
  fi
  if [ $# -eq 0 ]; then
    wait
    (( PARALLEL_COUNT-- ))
    return 0
  fi
  while [ $# -ne 0 ]; do
    wait "${1}"
    (( PARALLEL_COUNT-- ))
    shift
  done
}

#######################################
# Create a task with the given command
# Globals:
#   PARALLEL_COUNT
#   PARALLEL_MAX
# Arguments:
#   command, an array by reference representing a command
#   task id, optinal string by reference which contain the pid of the new task
# Outputs:
#   Write command on stderr.
#######################################
function parallel::run () {
  local -n cmd=$1
  local result
  if [ $PARALLEL_COUNT -ge $PARALLEL_MAX ]; then
    parallel::wait
  fi
  echo "${cmd[@]}" >&2
  "${cmd[@]}" &
  result="$!"
  (( PARALLEL_COUNT++ ))
  if [ $# -eq 2 ]; then
    local -n pid=$2
    pid="${result}"
  fi
}

#######################################
# Wait all running tasks
# Globals:
#   PARALLEL_COUNT
#######################################
function parallel::wait_all () {
  while [ $PARALLEL_COUNT -ne 0 ]; do
    wait
    (( PARALLEL_COUNT-- ))
  done
}
