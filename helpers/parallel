# DO NOT MODIFY THIS FILE
# Require bash 4.4 or above
# Functions to do things in parallel

#######################################
# Init required variables `PARALLEL_COUNT` & `PARALLEL_MAX`
# You can init variables by yourself if you want
# Globals:
#   PARALLEL_COUNT
#   PARALLEL_MAX
#######################################
function parallel::init () {
  # See https://stackoverflow.com/questions/6481005/how-to-obtain-the-number-of-cpus-cores-in-linux-from-the-command-line#answer-23569003
  declare -g -i PARALLEL_MAX=$(getconf _NPROCESSORS_ONLN)
}

#######################################
# Get number of background jobs
# Outputs:
#   Write the number of background jobs on stdout.
#######################################
function parallel::count () {
  # Update jobs information
  jobs >> /dev/null
  echo "$(jobs -p | wc -l)"
}

#######################################
# Create a task with the given command
# Globals:
#   PARALLEL_COUNT
#   PARALLEL_MAX
# Arguments:
#   command, an array by reference representing a command
#   task id, optinal string by reference which contain the pid of the new task
# Outputs:
#   Write command on stderr.
#######################################
function parallel::run () {
  local -n cmd=$1
  local result
  if [ "$(parallel::count)" -ge $PARALLEL_MAX ]; then
    wait -n
  fi
  echo "${cmd[@]}" >&2
  "${cmd[@]}" &
  result="$!"
  if [ $# -eq 2 ]; then
    local -n pid=$2
    pid="${result}"
  fi
}
