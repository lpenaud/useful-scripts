# Useful functions if you have to do run not defined number of jobs
# Require bash 4.4 or above

#######################################
# Init required variable `PARALLEL_MAX`
# If you give a value set it instead of default one
# Must be a number greeter than 0 ortherwise exit script.
# Globals:
#   PARALLEL_MAX
# Arguments:
#   PARALLEL_MAX, (optional) number of background jobs run simultaneously.
# Exit:
#   1 if the given argument is not a number.
#   2 if the given argument is not greeter than 0.
#######################################
function parallel::init () {
  local -i max
  if [ -n "${PARALLEL_MAX}" ]; then
    return
  fi
  if [ $# -eq 1 ]; then
    if [ "${1}" -gt 0 ]; then
      max="${1}"
    elif [ $? -eq 2 ]; then
      # If $1 is not a number
      exit 2
    else
      echo "PARALLEX_MAX must be greeter than 0" >&2
      exit 1
    fi
  else
    # See https://stackoverflow.com/questions/6481005/how-to-obtain-the-number-of-cpus-cores-in-linux-from-the-command-line#answer-23569003
    max="$(getconf _NPROCESSORS_ONLN)"
  fi
  declare -g -i PARALLEL_MAX="${max}"
}

#######################################
# Get number of background jobs
# Outputs:
#   Write the number of background jobs on stdout.
#######################################
function parallel::count () {
  echo "$(jobs -p | wc -l)"
}

#######################################
# Create a task with the given command.
# To get pid of task use $!
# Globals:
#   PARALLEL_MAX
# Arguments:
#   command, an array by reference representing a command
# Outputs:
#   Write command on stderr.
#######################################
function parallel::run () {
  local -n parallel_run_cmd=$1
  if [ "$(parallel::count)" -ge $PARALLEL_MAX ]; then
    wait -n
  fi
  echo "${parallel_run_cmd[@]}" >&2
  "${parallel_run_cmd[@]}" &
}

#######################################
# Wait for all jobs
# Returns:
#   0 
#######################################
function parallel::wait () {
  wait
}
