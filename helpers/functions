# Useful functions
# Required Bash version 4 and above to work

#######################################
# Ask user if they want to overwrite file only if it exists
# Arguments:
#   Filename, path
# Output:
#   Prompt before overwrite on stderr.
# Returns:
#   0 if the file not exists or can be overwrite, otherwise 1.
#######################################
function overwrite () {
  local -l f
  if [ -e "${1}" ]; then
    read -p "Overwrite '${1}' [y/N]? " f
    if [ "${f}" != "y" ]; then
      return 1
    fi
  fi
  return 0
}

#######################################
# Get dirname from string subtitution.
# Arguments:
#   Filename, pathname
# Outputs:
#   Write dirname to stdout.
#######################################
function get_dirname () {
  echo "${1%\/*}"
}

#######################################
# Get filename without it extension
# Arguments:
#   Filename, pathname
# Outputs:
#   Write filename without it extension to stdout.
#######################################
function get_filename () {
  echo "${1%.*}"
}

#######################################
# Get basename from string subtitution.
# Arguments:
#   Filename, pathname
#   Remove extension
# Outputs:
#   Write basename to stdout.
#######################################
function get_basename () {
  local basename="$(echo "${1##*/}")"
  if [ -n "${2}" ]; then
    basename="$(get_filename "${basename}")"
  fi
  echo "${basename}"
}

#######################################
# Get basename from string subtitution.
# Arguments:
#   Filename, pathname
#   Remove extension
# Outputs:
#   Write basename to stdout.
#######################################
function get_extension () {
  echo ".${1##*.}"
}

#######################################
# Raise an error.
# Arguments:
#		Exit code
#   ...error messages
# Outputs:
#		Write errors message to stderr.
#######################################
function raise () {
  local -i exit_code=$1
  shift
  if [ $# -eq 0 ]; then
    echo "Unknow error" >&2
  else
    while [ $# -ne 0 ]; do
      echo "${1}" >&2
      shift
    done
  fi
  exit $exit_code
}

#######################################
# Assert if the given value is empty.
# Arguments:
#		Value
#   Error message
# Outputs:
#		Write an error message to stderr if the value is empty.
#######################################
function assert_not_null () {
  if [ -z "${1}" ]; then
    if [ -n "${2}" ]; then
      raise 1 "${2}"
    else
      raise 1
    fi
  fi
}

#######################################
# Assert if the strings are not equals.
# Arguments:
#		Expected
#   Current
#   Error message
# Outputs:
#		Write an error message to stderr if the strings are not equals.
#######################################
function assert_equals () {
  if [ "${2}" != "${1}" ]; then
    if [ -n "${3}" ]; then
      raise 1 "${3}"
    else
      raise 1 "Expected '${2}' but have '${1}'"
    fi
  fi
}

#######################################
# Assert if the pathname isn't a director or doesn't exist.
# Arguments:
#		Pathname, a directory
#   Error message
# Outputs:
#		Write an error message to stderr if the value isn't a directory or doesn't exist.
#######################################
function assert_dir () {
  if [ ! -d "${1}" ]; then
    if [ -n "${2}" ]; then
      raise 1 "${2}"
    else
      raise 1 "'${2}' isn't a directory or doesn't exist"
    fi
  fi
}

#######################################
# Assert if the last exit code is not equal at 0.
#######################################
function assert_code () {
  local code="$?"
  if [ $code -ne 0 ]; then
    exit $code
  fi
}

#######################################
# Assert if a value is a positive number
# Arguments:
#		Value to test
#   Error message (optinal)
# Outputs:
#		Write an error message to stderr if the value isn't a positive number.
# Exit
#   1 If the number is not a positive number
#######################################
function assert_is_positive () {
  local msg="${2}"
  if [ "${1}" -gt 0 ] 2> /dev/null; then
    return 0
  fi
  if [ -z "${msg}" ]; then
    msg="'${1}' is not a positive number"
  fi
  raise 1 "${msg}"
}

#######################################
# Get user prefered editor from env or default one.
# Outputs:
#		A text editor
#######################################
function get_editor () {
  if [ -z "${EDITOR}" ]; then
    echo "${EDITOR}"
  else
    echo "vi"
  fi
}

#######################################
# Print usage.
# Arguments:
#   ...Usages
# Outputs:
#		Write usages of an program to stdout.
#######################################
function print_usage () {
  if [ $# -eq 1 ]; then
    echo "Usage: ${0} ${1}"
    return 0
  fi
  echo "Usage:"
  while [ $# -ne 0 ]; do
    echo "  ${0} ${1}"
    shift
  done
}

function format_cmd () {
  local cmd=()
  for arg in "$@"; do
    if [[ "${arg}" =~ [[:space:]] ]]; then
      cmd+=("'${arg}'")
    else
      cmd+=("${arg}")
    fi
  done
  echo "${cmd[@]}"
}

#######################################
# Test given exit code.
# Arguments:
#   ...codes
# Returns:
#   0 if there are a code not equals at 0, otherwise 1.
#######################################
function has_error () {
  for i in "$@"; do
    if [ "${i}" -ne 0 ]; then
      return 0
    fi
  done
  return 1
}

#######################################
# Test given arg if it's a flag.
# Arguments:
#   Variable to test
# Returns:
#   0 if the variable is a flag otherwise 1.
#######################################
function is_flag () {
  if [[ "${1}" =~ ^-{1,2}[[:lower:]]+$ ]]; then
    return 0
  else
    return 1
  fi
}

#######################################
# Import file from the directory of current main script.
# Globals:
#   DIRNAME
# Arguments:
#   Relative path to file
# Outputs:
#   Write error message if the file doesn't exit to stderr.
# Returns:
#   1 if the file doesn't exit.
#######################################
function import () {
  echo "Deprecated use basse::import instead" >&2
  local file="${DIRNAME}/${1}"
  if [ ! -f "${file}" ]; then
    echo "Error: Cannot import '${file}'" >&2
    exit 1
  fi
  . "${file}"
}
